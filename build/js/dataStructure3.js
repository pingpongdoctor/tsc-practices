"use strict";
//USE TYPE ASSERTION
let name1 = "simon";
let name2 = name1;
let name3 = name2;
//ANOTHER WAY TO USE TYPE ASSERTION (CAN NOT USE THIS IN TSX IN REACT APPS)
let d = "simon";
let e = d;
let f = e;
//USE TYPE ASSERTION FOR THE RETURNED VALUE OF A FUNCTION WHICH HAS A UNION TYPE
const concatFunc = (a, b, c) => {
    if (c === "add") {
        return a + b;
    }
    return "" + a + b;
}; //THIS FUNCTION RETURN STRING OR NUMBER VALUE
//THE RETURN VALUE IS A STRING BUT THE FUNCTION RETURN STRING OR VALUE
//USE THE TYPE ASSERTION TO ASSERT THAT THE RETURN VALUE IS A STRING IN THIS SITUATION
const returnValue = concatFunc(1, 2, "concat");
//USE THE TYPE ASSERTION TO ASSERT THAT THE RETURN VALUE IS A NUMBER IN THIS SITUATION
const returnValue2 = concatFunc(1, 2, "add");
//BE CAREFUL WHEN USING TYPE ASSERTION SINCE TYPESCRIPT IS FORCED TO BELIEVE YOU
//THE FUNCTION BELOW RETURN A STRING BUT THE DATA TYPE ANNOTATED FOR THE VARIABLE IS STRING, AND TYPSCRIPT DOES NOT WARN ABOUT THAT
const returnValue3 = concatFunc(1, 2, "concat");
//DOUBLE ASSERTIONS ARE USED TO OVERRULE THE TYPESCRIPT
//THIS IS NOT USED MUCH AND WE SHOULD AVOID THIS
10;
//USE TYPE ASSERTION WHEN IT COMES TO USING DOM
//BECAUSE THE IMAGE ELEMENT CAN BE NULL, WE NEED TO USE TYPE ASSERTION SPECIFY TO LET TS KNOW THAT IMAGE IS AN ELEMENT SO THAT IT CAN BE ACCESSED
const image = document.querySelector("#imgEle");
const image2 = document.getElementById("imgEle");
image.src;
image2.src;
//USE ! TO EXPRESS THAT THE IT IS A NOT-NULL ASSERTION
const image3 = document.getElementById("imgEle"); //IN THIS CASE, THE TS KNOWS THAT THIS IS AN ELEMENT BUT IT DOES NOT KNOW THAT THIS IS AN IMAGE
